"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RateLimiter = void 0;
class RateLimiter {
    constructor(rateLimitSettings) {
        this.setRateLimitSettings = (settings) => {
            this.rateLimitSettings = Object.assign(Object.assign({}, this.rateLimitSettings), settings);
        };
        this.getRetryCount = () => this.rateLimitSettings.retryCount;
        this.getTimeBetweenRetries = () => this.rateLimitSettings.timeBetweenRetries;
        this.setIsSleeping = (isSleeping) => {
            this.isSleeping = isSleeping;
        };
        this.requestQueue = [];
        this.completedQueueSize = 0;
        this.isThrottleActive = false;
        this.isRequestInProgress = false;
        this.isSleeping = false;
        this.rateLimitSettings = Object.assign({ enabled: false, hitsPerMinute: 60, retryCount: 3, timeBetweenRetries: 1000 }, rateLimitSettings);
    }
    disableThrottle(hits) {
        if (!this.isThrottleActive)
            return;
        setTimeout(() => {
            this.isThrottleActive = false;
            if (this.requestQueue.length > 0)
                this.execute();
        }, ((60 * 1000) / this.rateLimitSettings.hitsPerMinute) * hits);
    }
    taskCleanUp(amount) {
        this.isRequestInProgress = false;
        if (this.requestQueue.length > 0)
            this.execute();
        setTimeout(() => {
            this.completedQueueSize -= amount;
            this.execute();
        }, 1000 * 60);
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isRequestInProgress || this.isThrottleActive || this.isSleeping)
                return;
            const request = this.requestQueue.shift();
            if (!request)
                return;
            if (this.completedQueueSize + request.hits <= this.rateLimitSettings.hitsPerMinute) {
                this.isThrottleActive = true;
                this.isRequestInProgress = true;
                this.completedQueueSize += request.hits;
                this.disableThrottle(request.hits);
                yield request.task();
                this.taskCleanUp(request.hits);
            }
            else {
                this.requestQueue.unshift(request);
            }
        });
    }
    addAndExecute(request, hits, priority = false) {
        if (priority) {
            this.requestQueue.unshift({ task: request, hits });
        }
        else {
            this.requestQueue.push({ task: request, hits });
        }
        this.execute();
    }
    isEnabled() {
        return this.rateLimitSettings.enabled;
    }
}
exports.RateLimiter = RateLimiter;
