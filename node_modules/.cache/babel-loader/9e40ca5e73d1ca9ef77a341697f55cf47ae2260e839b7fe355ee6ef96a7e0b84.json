{"ast":null,"code":"async function fetchAndParseCSV(csvFile){const response=await fetch(csvFile);const csvText=await response.text();// Split the text into lines\nconst lines=csvText.trim().split('\\n');// Skip the header row and map the rest to points\nconst points=lines.slice(1).map(line=>{const parts=line.split(',');// Assuming the second and third columns are latitude and longitude, respectively\n// Adjust the indexing if your CSV structure is different\nreturn{lat:parseFloat(parts[2]),lng:parseFloat(parts[1])};});return points;}export{fetchAndParseCSV};","map":{"version":3,"names":["fetchAndParseCSV","csvFile","response","fetch","csvText","text","lines","trim","split","points","slice","map","line","parts","lat","parseFloat","lng"],"sources":["/Users/elodielabrecquelanglais/Desktop/WalkReadyUs/src/CsvParse.js"],"sourcesContent":["async function fetchAndParseCSV(csvFile) {\r\n    const response = await fetch(csvFile);\r\n    const csvText = await response.text();\r\n    // Split the text into lines\r\n    const lines = csvText.trim().split('\\n');\r\n    // Skip the header row and map the rest to points\r\n    const points = lines.slice(1).map(line => {\r\n      const parts = line.split(',');\r\n\r\n      // Assuming the second and third columns are latitude and longitude, respectively\r\n      // Adjust the indexing if your CSV structure is different\r\n      return { lat: parseFloat(parts[2]), lng: parseFloat(parts[1]) };\r\n    });\r\n    return points;\r\n  }\r\n  \r\n  export { fetchAndParseCSV };\r\n  "],"mappings":"AAAA,cAAe,CAAAA,gBAAgBA,CAACC,OAAO,CAAE,CACrC,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACF,OAAO,CAAC,CACrC,KAAM,CAAAG,OAAO,CAAG,KAAM,CAAAF,QAAQ,CAACG,IAAI,CAAC,CAAC,CACrC;AACA,KAAM,CAAAC,KAAK,CAAGF,OAAO,CAACG,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC,CACxC;AACA,KAAM,CAAAC,MAAM,CAAGH,KAAK,CAACI,KAAK,CAAC,CAAC,CAAC,CAACC,GAAG,CAACC,IAAI,EAAI,CACxC,KAAM,CAAAC,KAAK,CAAGD,IAAI,CAACJ,KAAK,CAAC,GAAG,CAAC,CAE7B;AACA;AACA,MAAO,CAAEM,GAAG,CAAEC,UAAU,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC,CAAEG,GAAG,CAAED,UAAU,CAACF,KAAK,CAAC,CAAC,CAAC,CAAE,CAAC,CACjE,CAAC,CAAC,CACF,MAAO,CAAAJ,MAAM,CACf,CAEA,OAAST,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}