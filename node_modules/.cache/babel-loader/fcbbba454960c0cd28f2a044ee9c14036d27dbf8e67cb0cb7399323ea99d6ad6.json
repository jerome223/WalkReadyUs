{"ast":null,"code":"import axios from'axios';// Function to get reachable area (isochrone) based on walking time\nexport const getTravelTimeData=async(lat,lng,time)=>{// console.log(\"getTravelTimeData called\", { lat, lng, time });\nconst url='https://api.traveltimeapp.com/v4/time-map';const config={headers:{'X-Application-Id':'26a91fc8','X-Api-Key':'61dc709a75f4921509709916664fa4ba','Content-Type':'application/json'}};const body={\"departure_searches\":[{\"id\":\"isochrone-0\",\"coords\":{\"lat\":lat,\"lng\":lng},\"departure_time\":\"2023-10-10T08:00:00Z\",\"travel_time\":time*60,// Convert minutes to seconds\n\"transportation\":{\"type\":\"walking\"}}]};try{const response=await axios.post(url,body,config);//console.log(JSON.stringify(response.data, null, 2)); // This will give you a formatted view of the response\nreturn response.data;// This will include the isochrone information\n}catch(error){console.error('Error fetching walking area data:',error);throw error;}};","map":{"version":3,"names":["axios","getTravelTimeData","lat","lng","time","url","config","headers","body","response","post","data","error","console"],"sources":["/Users/elodielabrecquelanglais/Desktop/WalkReadyUs/my-app/src/TravelTime.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Function to get reachable area (isochrone) based on walking time\r\nexport const getTravelTimeData = async (lat, lng, time) => {\r\n   // console.log(\"getTravelTimeData called\", { lat, lng, time });\r\n    const url = 'https://api.traveltimeapp.com/v4/time-map';\r\n    const config = {\r\n        headers: {\r\n        'X-Application-Id': '26a91fc8',\r\n        'X-Api-Key': '61dc709a75f4921509709916664fa4ba',\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n    const body = {\r\n        \"departure_searches\": [{\r\n          \"id\": \"isochrone-0\",\r\n          \"coords\": {\r\n            \"lat\": lat,\r\n            \"lng\": lng\r\n          },\r\n          \"departure_time\": \"2023-10-10T08:00:00Z\",\r\n          \"travel_time\": time * 60, // Convert minutes to seconds\r\n          \"transportation\": {\r\n            \"type\": \"walking\"\r\n          }\r\n         \r\n\r\n        }]\r\n    };\r\n  \r\n    try {\r\n        const response = await axios.post(url, body, config);\r\n        //console.log(JSON.stringify(response.data, null, 2)); // This will give you a formatted view of the response\r\n\r\n        return response.data; // This will include the isochrone information\r\n      } catch (error) {\r\n        console.error('Error fetching walking area data:', error);\r\n        throw error;\r\n      }\r\n  };"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB;AACA,MAAO,MAAM,CAAAC,iBAAiB,CAAG,KAAAA,CAAOC,GAAG,CAAEC,GAAG,CAAEC,IAAI,GAAK,CACxD;AACC,KAAM,CAAAC,GAAG,CAAG,2CAA2C,CACvD,KAAM,CAAAC,MAAM,CAAG,CACXC,OAAO,CAAE,CACT,kBAAkB,CAAE,UAAU,CAC9B,WAAW,CAAE,kCAAkC,CAC/C,cAAc,CAAE,kBAClB,CACF,CAAC,CACD,KAAM,CAAAC,IAAI,CAAG,CACT,oBAAoB,CAAE,CAAC,CACrB,IAAI,CAAE,aAAa,CACnB,QAAQ,CAAE,CACR,KAAK,CAAEN,GAAG,CACV,KAAK,CAAEC,GACT,CAAC,CACD,gBAAgB,CAAE,sBAAsB,CACxC,aAAa,CAAEC,IAAI,CAAG,EAAE,CAAE;AAC1B,gBAAgB,CAAE,CAChB,MAAM,CAAE,SACV,CAGF,CAAC,CACL,CAAC,CAED,GAAI,CACA,KAAM,CAAAK,QAAQ,CAAG,KAAM,CAAAT,KAAK,CAACU,IAAI,CAACL,GAAG,CAAEG,IAAI,CAAEF,MAAM,CAAC,CACpD;AAEA,MAAO,CAAAG,QAAQ,CAACE,IAAI,CAAE;AACxB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,CAAEA,KAAK,CAAC,CACzD,KAAM,CAAAA,KAAK,CACb,CACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}