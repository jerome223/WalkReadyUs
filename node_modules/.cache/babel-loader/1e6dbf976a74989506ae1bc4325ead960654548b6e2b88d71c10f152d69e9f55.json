{"ast":null,"code":"import React,{useEffect,useRef,useState}from'react';import{MapContainer,TileLayer,Marker,Popup,useMap}from'react-leaflet';import'leaflet/dist/leaflet.css';import'./App.css';import{getTravelTimeData}from'./TravelTime';import axios from'axios';import{Polygon}from'react-leaflet';import L from'leaflet';import pinIcon from'./pin.png';import comIcon from'./com.png';import medIcon from'./med.png';import epiceIcon from'./epice.png';import pharmIcon from'./pharm.png';import restoIcon from'./resto.png';import parcIcon from'./parc.png';import{isPointInsidePolygon}from'./VerifyInside';//import { fetchAndParseCSV } from './CsvParse';\nimport{fetchNearbyUtilities}from'./FetchNearby';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[position,setPosition]=useState([45.5017,-73.5673]);// Montreal's coordinates as default\nconst[address,setAddress]=useState('2500 Chem. de Polytechnique, MontrÃ©al, QC H3T 1J4, Canada');const autocompleteInput=useRef(null);let autocomplete=null;const[time,setTime]=useState('15');// New state for time in minutes\nconst[isochrone,setIsochrone]=useState([]);const[insidePoints,setInsidePoints]=useState({library:[],hospital:[],park:[],pharmacy:[],restaurant:[],supermarket:[]});const[checkboxStates,setCheckboxStates]=useState({Bibliotheques:false,CentresMedicaux:false,Parcs:false,Pharmacies:false,Restaurants:false,Epiceries:false});const apiKey=process.env.REACT_APP_GOOGLE_MAPS_API_KEY;const handleCheckboxChange=option=>e=>{setCheckboxStates({...checkboxStates,[option]:e.target.checked});};const updatePosition=(lat,lng)=>{setPosition([lat,lng]);};// Replace this function with Google's API for places\nconst fetchAndSetPointsForCategory=async(category,origin,shapes)=>{//console.log(origin, origin.lat, origin.lng);\ntry{const dist=60*parseInt(time,10);const points=await fetchNearbyUtilities(origin.lat,origin.lng,dist,category);// distance should be 100m x time in minutes\nconsole.log(points,category,dist);const insidePoints=points.filter(point=>isPointInsidePolygon([point.lat,point.lng],shapes));console.log(insidePoints);setInsidePoints(prevState=>({...prevState,[category]:insidePoints}));}catch(error){console.error(\"Error fetching \".concat(category,\":\"),error);}};useEffect(()=>{autocomplete=new window.google.maps.places.Autocomplete(autocompleteInput.current,{types:['geocode']});autocomplete.addListener('place_changed',()=>{const place=autocomplete.getPlace();setAddress(place.formatted_address);});},[]);const searchAddress=async()=>{const addressUri=encodeURIComponent(address);//console.log(\"address\", address, \"addressUri\", addressUri);\nconsole.log(apiKey);const geocodingUrl=\"https://maps.googleapis.com/maps/api/geocode/json?address=\".concat(addressUri,\"&key=AIzaSyAu05yaHnhqM-q45v0WsRj_mOgz_KGyS2s\");//to make secret later\ntry{const geoResponse=await axios.get(geocodingUrl);const geoData=geoResponse.data;if(geoData.results&&geoData.results.length>0){const{lat,lng}=geoData.results[0].geometry.location;//console.log(lat, lng);\nupdatePosition(parseFloat(lat),parseFloat(lng));//console.log(lat, lon);\n// Ensure the time is correctly parsed as an integer\nconst data=await getTravelTimeData(parseFloat(lat),parseFloat(lng),parseInt(time,10));if(data&&data.results&&data.results[0].shapes){const isochroneShapes=data.results[0].shapes.map(shape=>shape.shell);setIsochrone(isochroneShapes);if(isochroneShapes.length>0){// Ensure isochroneShapes is not empty\ntry{await fetchAndSetPointsForCategory('hospital',{lat,lng},isochroneShapes[0]);await fetchAndSetPointsForCategory('restaurant',{lat,lng},isochroneShapes[0]);await fetchAndSetPointsForCategory('supermarket',{lat,lng},isochroneShapes[0]);await fetchAndSetPointsForCategory('park',{lat,lng},isochroneShapes[0]);await fetchAndSetPointsForCategory('pharmacy',{lat,lng},isochroneShapes[0]);await fetchAndSetPointsForCategory('library',{lat,lng},isochroneShapes[0]);}catch(error){console.error('Error fetching points for category:',error);}}}}else{alert('Address not found!');}}catch(error){console.error('Error:',error);alert('Failed to search the address or get travel time data.');}};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"input\",{ref:autocompleteInput,type:\"text\",value:address,onChange:e=>setAddress(e.target.value),placeholder:\"Ton adresse icitte\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\"// Ensures only numbers can be entered\n,value:time,onChange:e=>setTime(e.target.value),placeholder:\"Temps de marche en minutes\"}),/*#__PURE__*/_jsx(\"button\",{onClick:searchAddress,children:\"Chercher\"}),/*#__PURE__*/_jsx(\"div\",{children:Object.keys(checkboxStates).map(option=>/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:checkboxStates[option],onChange:handleCheckboxChange(option)}),\" \",option.replace('option','Option ')]},option))}),/*#__PURE__*/_jsx(MapView,{address:address,position:position,isochrone:isochrone,insidePoints:insidePoints,checkboxStates:checkboxStates})]});}function MapUpdater(_ref){let{position}=_ref;const map=useMap();React.useEffect(()=>{map.flyTo(position,map.getZoom());},[position,map]);return null;// This component does not render anything itself.\n}const customIcon=new L.Icon({iconUrl:pinIcon,iconSize:[32,32],iconAnchor:[16,32],popupAnchor:[0,-32]});const comMarkerIcon=new L.Icon({iconUrl:comIcon,iconSize:[32,32],iconAnchor:[16,32],popupAnchor:[0,-32]});const medMarkerIcon=new L.Icon({iconUrl:medIcon,iconSize:[32,32],iconAnchor:[16,32],popupAnchor:[0,-32]});const parcMarkerIcon=new L.Icon({iconUrl:parcIcon,iconSize:[32,32],iconAnchor:[16,32],popupAnchor:[0,-32]});const pharmMarkerIcon=new L.Icon({iconUrl:pharmIcon,iconSize:[32,32],iconAnchor:[16,32],popupAnchor:[0,-32]});const epiceMarkerIcon=new L.Icon({iconUrl:epiceIcon,iconSize:[32,32],iconAnchor:[16,32],popupAnchor:[0,-32]});const restoMarkerIcon=new L.Icon({iconUrl:restoIcon,iconSize:[32,32],iconAnchor:[16,32],popupAnchor:[0,-32]});const MapView=_ref2=>{let{address,position,isochrone,insidePoints,checkboxStates}=_ref2;return/*#__PURE__*/_jsxs(MapContainer,{center:position,zoom:14,style:{height:'100vh',width:'100%'},children:[/*#__PURE__*/_jsx(TileLayer,{url:\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",attribution:\"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"}),/*#__PURE__*/_jsx(Marker,{position:position,icon:customIcon,children:/*#__PURE__*/_jsxs(Popup,{children:[address,\" \",/*#__PURE__*/_jsx(\"br\",{}),\" We know where you live now.\"]})}),checkboxStates.Bibliotheques&&insidePoints.library.map((point,index)=>/*#__PURE__*/_jsx(Marker,{position:[point.lat,point.lng],icon:comMarkerIcon,children:/*#__PURE__*/_jsx(Popup,{children:point.name})},index)),checkboxStates.CentresMedicaux&&insidePoints.hospital.map((point,index)=>/*#__PURE__*/_jsx(Marker,{position:[point.lat,point.lng],icon:medMarkerIcon,children:/*#__PURE__*/_jsx(Popup,{children:point.name})},index)),checkboxStates.Parcs&&insidePoints.park.map((point,index)=>/*#__PURE__*/_jsx(Marker,{position:[point.lat,point.lng],icon:parcMarkerIcon,children:/*#__PURE__*/_jsx(Popup,{children:point.name})},index)),checkboxStates.Pharmacies&&insidePoints.pharmacy.map((point,index)=>/*#__PURE__*/_jsx(Marker,{position:[point.lat,point.lng],icon:pharmMarkerIcon,children:/*#__PURE__*/_jsx(Popup,{children:point.name})},index)),checkboxStates.Restaurants&&insidePoints.restaurant.map((point,index)=>/*#__PURE__*/_jsx(Marker,{position:[point.lat,point.lng],icon:restoMarkerIcon,children:/*#__PURE__*/_jsxs(Popup,{children:[point.name,/*#__PURE__*/_jsx(\"br\",{})]})},index)),checkboxStates.Epiceries&&insidePoints.supermarket.map((point,index)=>/*#__PURE__*/_jsx(Marker,{position:[point.lat,point.lng],icon:epiceMarkerIcon,children:/*#__PURE__*/_jsx(Popup,{children:point.name})},index)),isochrone.map((area,index)=>/*#__PURE__*/_jsx(Polygon,{positions:area,color:\"blue\",fillOpacity:0.3},index)),/*#__PURE__*/_jsx(MapUpdater,{position:position})]});};export default App;","map":{"version":3,"names":["React","useEffect","useRef","useState","MapContainer","TileLayer","Marker","Popup","useMap","getTravelTimeData","axios","Polygon","L","pinIcon","comIcon","medIcon","epiceIcon","pharmIcon","restoIcon","parcIcon","isPointInsidePolygon","fetchNearbyUtilities","jsx","_jsx","jsxs","_jsxs","App","position","setPosition","address","setAddress","autocompleteInput","autocomplete","time","setTime","isochrone","setIsochrone","insidePoints","setInsidePoints","library","hospital","park","pharmacy","restaurant","supermarket","checkboxStates","setCheckboxStates","Bibliotheques","CentresMedicaux","Parcs","Pharmacies","Restaurants","Epiceries","apiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","handleCheckboxChange","option","e","target","checked","updatePosition","lat","lng","fetchAndSetPointsForCategory","category","origin","shapes","dist","parseInt","points","console","log","filter","point","prevState","error","concat","window","google","maps","places","Autocomplete","current","types","addListener","place","getPlace","formatted_address","searchAddress","addressUri","encodeURIComponent","geocodingUrl","geoResponse","get","geoData","data","results","length","geometry","location","parseFloat","isochroneShapes","map","shape","shell","alert","className","children","ref","type","value","onChange","placeholder","onClick","Object","keys","replace","MapView","MapUpdater","_ref","flyTo","getZoom","customIcon","Icon","iconUrl","iconSize","iconAnchor","popupAnchor","comMarkerIcon","medMarkerIcon","parcMarkerIcon","pharmMarkerIcon","epiceMarkerIcon","restoMarkerIcon","_ref2","center","zoom","style","height","width","url","attribution","icon","index","name","area","positions","color","fillOpacity"],"sources":["C:/Users/pierk/OneDrive/Desktop/courseraRxNtv/WalkReadyUs/src/App.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup, useMap } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport './App.css';\r\nimport { getTravelTimeData } from './TravelTime';\r\nimport axios from 'axios';\r\nimport { Polygon } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport pinIcon from './pin.png';\r\nimport comIcon from './com.png';\r\nimport medIcon from './med.png';\r\nimport epiceIcon from './epice.png';\r\nimport pharmIcon from './pharm.png';\r\nimport restoIcon from './resto.png';\r\nimport parcIcon from './parc.png';\r\nimport { isPointInsidePolygon } from './VerifyInside';\r\n//import { fetchAndParseCSV } from './CsvParse';\r\nimport { fetchNearbyUtilities } from './FetchNearby';\r\n\r\n\r\nfunction App() {\r\n  const [position, setPosition] = useState([45.5017, -73.5673]); // Montreal's coordinates as default\r\n  const [address, setAddress] = useState('2500 Chem. de Polytechnique, MontrÃ©al, QC H3T 1J4, Canada');\r\n  const autocompleteInput = useRef(null);\r\n  let autocomplete = null;\r\n  const [time, setTime] = useState('15'); // New state for time in minutes\r\n  const [isochrone, setIsochrone] = useState([]);\r\n  const [insidePoints, setInsidePoints] = useState({\r\n    library: [],\r\n    hospital: [],\r\n    park: [],\r\n    pharmacy: [],\r\n    restaurant: [],\r\n    supermarket: []\r\n  });\r\n  const [checkboxStates, setCheckboxStates] = useState({\r\n    Bibliotheques: false,\r\n    CentresMedicaux: false,\r\n    Parcs: false,\r\n    Pharmacies: false,\r\n    Restaurants: false,\r\n    Epiceries: false\r\n  });\r\n  const apiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\r\n\r\n  const handleCheckboxChange = (option) => (e) => {\r\n  setCheckboxStates({ ...checkboxStates, [option]: e.target.checked });\r\n  };\r\n  \r\n  const updatePosition = (lat, lng) => {\r\n    setPosition([lat, lng]);\r\n  };\r\n\r\n  // Replace this function with Google's API for places\r\n  const fetchAndSetPointsForCategory = async (category, origin, shapes) => { \r\n    //console.log(origin, origin.lat, origin.lng);\r\n    try{\r\n    const dist = 60*parseInt(time, 10);\r\n    const points = await fetchNearbyUtilities(origin.lat, origin.lng, dist, category); // distance should be 100m x time in minutes\r\n    console.log(points, category, dist);\r\n    const insidePoints = points.filter(point => \r\n      isPointInsidePolygon([point.lat, point.lng], shapes)\r\n    );\r\n    console.log(insidePoints);\r\n    setInsidePoints(prevState => ({ ...prevState, [category]: insidePoints }));\r\n    }catch (error){\r\n      console.error(`Error fetching ${category}:`, error);\r\n    }\r\n  };\r\n  \r\n  useEffect(() => {\r\n    autocomplete = new window.google.maps.places.Autocomplete(autocompleteInput.current,\r\n      {types: ['geocode']});\r\n\r\n    autocomplete.addListener('place_changed', () => {\r\n      const place = autocomplete.getPlace();\r\n      setAddress(place.formatted_address);\r\n    });\r\n  }, []);\r\n\r\n  const searchAddress = async () => {\r\n    const addressUri = encodeURIComponent(address);\r\n    //console.log(\"address\", address, \"addressUri\", addressUri);\r\n    console.log(apiKey);\r\n    const geocodingUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${addressUri}&key=AIzaSyAu05yaHnhqM-q45v0WsRj_mOgz_KGyS2s`; //to make secret later\r\n    try {\r\n      const geoResponse = await axios.get(geocodingUrl);\r\n      const geoData = geoResponse.data;\r\n      \r\n      if (geoData.results && geoData.results.length > 0) {\r\n        const { lat, lng } = geoData.results[0].geometry.location;\r\n        //console.log(lat, lng);\r\n        updatePosition(parseFloat(lat), parseFloat(lng));\r\n        //console.log(lat, lon);\r\n        // Ensure the time is correctly parsed as an integer\r\n\r\n        const data = await getTravelTimeData(parseFloat(lat), parseFloat(lng), parseInt(time, 10));\r\n \r\n          if (data && data.results && data.results[0].shapes) \r\n            {\r\n              const isochroneShapes = data.results[0].shapes.map(shape => shape.shell);\r\n              setIsochrone(isochroneShapes);\r\n\r\n          \r\n              if (isochroneShapes.length > 0) { // Ensure isochroneShapes is not empty\r\n                try{\r\n                  await fetchAndSetPointsForCategory('hospital', { lat, lng }, isochroneShapes[0]);\r\n                  await fetchAndSetPointsForCategory('restaurant', { lat, lng }, isochroneShapes[0]);\r\n                  await fetchAndSetPointsForCategory('supermarket', { lat, lng }, isochroneShapes[0]);\r\n                  await fetchAndSetPointsForCategory('park', { lat, lng }, isochroneShapes[0]);\r\n                  await fetchAndSetPointsForCategory('pharmacy', { lat, lng }, isochroneShapes[0]);\r\n                  await fetchAndSetPointsForCategory('library', { lat, lng }, isochroneShapes[0]);\r\n                } catch(error){\r\n                  console.error('Error fetching points for category:', error);\r\n                              }\r\n              }\r\n            }\r\n        } \r\n        else {\r\n              alert('Address not found!');\r\n             }\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      alert('Failed to search the address or get travel time data.');\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <input\r\n        ref={autocompleteInput}\r\n        type=\"text\"\r\n        value={address}\r\n        onChange={(e) => setAddress(e.target.value)}\r\n        placeholder=\"Ton adresse icitte\"\r\n      />\r\n       <input\r\n        type=\"number\" // Ensures only numbers can be entered\r\n        value={time}\r\n        onChange={(e) => setTime(e.target.value)}\r\n        placeholder=\"Temps de marche en minutes\"\r\n      />\r\n      <button onClick={searchAddress}>Chercher</button>\r\n\r\n          {/* Adding checkboxes */}\r\n          <div>\r\n              {Object.keys(checkboxStates).map((option) => (\r\n                <label key={option}>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={checkboxStates[option]}\r\n                    onChange={handleCheckboxChange(option)}\r\n                  /> {option.replace('option', 'Option ')}\r\n                </label>\r\n              ))}\r\n          </div>\r\n\r\n\r\n\r\n      <MapView \r\n        address={address}\r\n        position={position} \r\n        isochrone={isochrone} \r\n        insidePoints={insidePoints} \r\n        checkboxStates={checkboxStates}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction MapUpdater({ position }) {\r\n  const map = useMap();\r\n\r\n  React.useEffect(() => {\r\n    map.flyTo(position, map.getZoom());\r\n  }, [position, map]);\r\n\r\n  return null; // This component does not render anything itself.\r\n}\r\n\r\nconst customIcon = new L.Icon({\r\n  iconUrl: pinIcon,\r\n  iconSize: [32, 32],\r\n  iconAnchor: [16, 32],\r\n  popupAnchor: [0, -32],\r\n});\r\n\r\nconst comMarkerIcon = new L.Icon({\r\n  iconUrl: comIcon,\r\n  iconSize: [32, 32],\r\n  iconAnchor: [16, 32],\r\n  popupAnchor: [0, -32],\r\n});\r\n\r\nconst medMarkerIcon = new L.Icon({\r\n  iconUrl: medIcon,\r\n  iconSize: [32, 32],\r\n  iconAnchor: [16, 32],\r\n  popupAnchor: [0, -32],\r\n});\r\n\r\nconst parcMarkerIcon = new L.Icon({\r\n  iconUrl: parcIcon,\r\n  iconSize: [32, 32],\r\n  iconAnchor: [16, 32],\r\n  popupAnchor: [0, -32],\r\n});\r\n\r\nconst pharmMarkerIcon = new L.Icon({\r\n  iconUrl: pharmIcon,\r\n  iconSize: [32, 32],\r\n  iconAnchor: [16, 32],\r\n  popupAnchor: [0, -32],\r\n});\r\n\r\nconst epiceMarkerIcon = new L.Icon({\r\n  iconUrl: epiceIcon,\r\n  iconSize: [32, 32],\r\n  iconAnchor: [16, 32],\r\n  popupAnchor: [0, -32],\r\n});\r\n\r\nconst restoMarkerIcon = new L.Icon({\r\n  iconUrl: restoIcon,\r\n  iconSize: [32, 32],\r\n  iconAnchor: [16, 32],\r\n  popupAnchor: [0, -32],\r\n});\r\n\r\n\r\nconst MapView = ({ address, position, isochrone, insidePoints, checkboxStates }) => {\r\n  return (\r\n    <MapContainer center={position} zoom={14} style={{ height: '100vh', width: '100%' }}>\r\n      <TileLayer\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n      />\r\n      <Marker position={position} icon={customIcon}>\r\n        <Popup>\r\n        {address} <br/> We know where you live now.\r\n        </Popup>\r\n      </Marker>\r\n      \r\n      {checkboxStates.Bibliotheques && insidePoints.library.map((point, index) => (\r\n        <Marker key={index} position={[point.lat, point.lng]} icon={comMarkerIcon}>\r\n          <Popup>{point.name}</Popup>\r\n        </Marker>\r\n      ))}\r\n\r\n      {checkboxStates.CentresMedicaux && insidePoints.hospital.map((point, index) => (\r\n        <Marker key={index} position={[point.lat, point.lng]} icon={medMarkerIcon}>\r\n          <Popup>{point.name}</Popup>\r\n        </Marker>\r\n      ))}\r\n\r\n      {checkboxStates.Parcs && insidePoints.park.map((point, index) => (\r\n        <Marker key={index} position={[point.lat, point.lng]} icon={parcMarkerIcon}>\r\n          <Popup>{point.name}</Popup>\r\n        </Marker>\r\n      ))}\r\n\r\n      {checkboxStates.Pharmacies && insidePoints.pharmacy.map((point, index) => (\r\n        <Marker key={index} position={[point.lat, point.lng]} icon={pharmMarkerIcon}>\r\n          <Popup>{point.name}</Popup>\r\n        </Marker>\r\n      ))}\r\n\r\n      {checkboxStates.Restaurants && insidePoints.restaurant.map((point, index) => (\r\n        <Marker key={index} position={[point.lat, point.lng]} icon={restoMarkerIcon}>\r\n          <Popup>{point.name}<br /></Popup>\r\n        </Marker>\r\n      ))}\r\n\r\n      {checkboxStates.Epiceries && insidePoints.supermarket.map((point, index) => (\r\n        <Marker key={index} position={[point.lat, point.lng]} icon={epiceMarkerIcon}>\r\n          <Popup>{point.name}</Popup>\r\n        </Marker>\r\n      ))}\r\n\r\n      {isochrone.map((area, index) => (\r\n        <Polygon key={index} positions={area} color=\"blue\" fillOpacity={0.3} />\r\n      ))}\r\n      <MapUpdater position={position} />\r\n    </MapContainer>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}