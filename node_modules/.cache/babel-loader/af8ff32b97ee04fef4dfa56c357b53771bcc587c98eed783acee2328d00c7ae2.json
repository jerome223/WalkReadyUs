{"ast":null,"code":"import axios from 'axios';\n\n// Function to get reachable area (isochrone) based on walking time\nexport const getTravelTimeData = async (lat, lng, time) => {\n  // console.log(\"getTravelTimeData called\", { lat, lng, time });\n  const url = 'https://api.traveltimeapp.com/v4/time-map';\n  const config = {\n    headers: {\n      'X-Application-Id': '26a91fc8',\n      'X-Api-Key': '61dc709a75f4921509709916664fa4ba',\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = {\n    \"departure_searches\": [{\n      \"id\": \"isochrone-0\",\n      \"coords\": {\n        \"lat\": lat,\n        \"lng\": lng\n      },\n      \"departure_time\": \"2023-10-10T08:00:00Z\",\n      \"travel_time\": time * 60,\n      // Convert minutes to seconds\n      \"transportation\": {\n        \"type\": \"walking\"\n      }\n    }]\n  };\n  try {\n    const response = await axios.post(url, body, config);\n    //console.log(JSON.stringify(response.data, null, 2)); // This will give you a formatted view of the response\n\n    return response.data; // This will include the isochrone information\n  } catch (error) {\n    console.error('Error fetching walking area data:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","getTravelTimeData","lat","lng","time","url","config","headers","body","response","post","data","error","console"],"sources":["/Users/elodielabrecquelanglais/Desktop/WalkReadyUs/src/TravelTime.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Function to get reachable area (isochrone) based on walking time\r\nexport const getTravelTimeData = async (lat, lng, time) => {\r\n   // console.log(\"getTravelTimeData called\", { lat, lng, time });\r\n    const url = 'https://api.traveltimeapp.com/v4/time-map';\r\n    const config = {\r\n        headers: {\r\n        'X-Application-Id': '26a91fc8',\r\n        'X-Api-Key': '61dc709a75f4921509709916664fa4ba',\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n    const body = {\r\n        \"departure_searches\": [{\r\n          \"id\": \"isochrone-0\",\r\n          \"coords\": {\r\n            \"lat\": lat,\r\n            \"lng\": lng\r\n          },\r\n          \"departure_time\": \"2023-10-10T08:00:00Z\",\r\n          \"travel_time\": time * 60, // Convert minutes to seconds\r\n          \"transportation\": {\r\n            \"type\": \"walking\"\r\n          }\r\n         \r\n\r\n        }]\r\n    };\r\n  \r\n    try {\r\n        const response = await axios.post(url, body, config);\r\n        //console.log(JSON.stringify(response.data, null, 2)); // This will give you a formatted view of the response\r\n\r\n        return response.data; // This will include the isochrone information\r\n      } catch (error) {\r\n        console.error('Error fetching walking area data:', error);\r\n        throw error;\r\n      }\r\n  };"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAAA,CAAOC,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;EACxD;EACC,MAAMC,GAAG,GAAG,2CAA2C;EACvD,MAAMC,MAAM,GAAG;IACXC,OAAO,EAAE;MACT,kBAAkB,EAAE,UAAU;MAC9B,WAAW,EAAE,kCAAkC;MAC/C,cAAc,EAAE;IAClB;EACF,CAAC;EACD,MAAMC,IAAI,GAAG;IACT,oBAAoB,EAAE,CAAC;MACrB,IAAI,EAAE,aAAa;MACnB,QAAQ,EAAE;QACR,KAAK,EAAEN,GAAG;QACV,KAAK,EAAEC;MACT,CAAC;MACD,gBAAgB,EAAE,sBAAsB;MACxC,aAAa,EAAEC,IAAI,GAAG,EAAE;MAAE;MAC1B,gBAAgB,EAAE;QAChB,MAAM,EAAE;MACV;IAGF,CAAC;EACL,CAAC;EAED,IAAI;IACA,MAAMK,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAI,CAACL,GAAG,EAAEG,IAAI,EAAEF,MAAM,CAAC;IACpD;;IAEA,OAAOG,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,MAAMA,KAAK;EACb;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}