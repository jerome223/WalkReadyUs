{"ast":null,"code":"async function fetchAndParseCSV(csvFile) {\n  const response = await fetch(csvFile);\n  const csvText = await response.text();\n  // Split the text into lines\n  const lines = csvText.trim().split('\\n');\n  // Skip the header row and map the rest to points\n  const points = lines.slice(1).map(line => {\n    const parts = line.split(',');\n\n    // Assuming the second and third columns are latitude and longitude, respectively\n    // Adjust the indexing if your CSV structure is different\n    return {\n      lat: parseFloat(parts[2]),\n      lng: parseFloat(parts[1])\n    };\n  });\n  return points;\n}\nexport { fetchAndParseCSV };","map":{"version":3,"names":["fetchAndParseCSV","csvFile","response","fetch","csvText","text","lines","trim","split","points","slice","map","line","parts","lat","parseFloat","lng"],"sources":["/Users/elodielabrecquelanglais/Desktop/WalkReadyUs/src/CsvParse.js"],"sourcesContent":["async function fetchAndParseCSV(csvFile) {\r\n    const response = await fetch(csvFile);\r\n    const csvText = await response.text();\r\n    // Split the text into lines\r\n    const lines = csvText.trim().split('\\n');\r\n    // Skip the header row and map the rest to points\r\n    const points = lines.slice(1).map(line => {\r\n      const parts = line.split(',');\r\n\r\n      // Assuming the second and third columns are latitude and longitude, respectively\r\n      // Adjust the indexing if your CSV structure is different\r\n      return { lat: parseFloat(parts[2]), lng: parseFloat(parts[1]) };\r\n    });\r\n    return points;\r\n  }\r\n  \r\n  export { fetchAndParseCSV };\r\n  "],"mappings":"AAAA,eAAeA,gBAAgBA,CAACC,OAAO,EAAE;EACrC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,OAAO,CAAC;EACrC,MAAMG,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EACrC;EACA,MAAMC,KAAK,GAAGF,OAAO,CAACG,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC;EACxC;EACA,MAAMC,MAAM,GAAGH,KAAK,CAACI,KAAK,CAAC,CAAC,CAAC,CAACC,GAAG,CAACC,IAAI,IAAI;IACxC,MAAMC,KAAK,GAAGD,IAAI,CAACJ,KAAK,CAAC,GAAG,CAAC;;IAE7B;IACA;IACA,OAAO;MAAEM,GAAG,EAAEC,UAAU,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;MAAEG,GAAG,EAAED,UAAU,CAACF,KAAK,CAAC,CAAC,CAAC;IAAE,CAAC;EACjE,CAAC,CAAC;EACF,OAAOJ,MAAM;AACf;AAEA,SAAST,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}